(define (attach-tag type-tag contents)
  (if (and (number? contents) (eq? type-tag 'scheme-number))
      contents
      (cons type-tag contents)))

(define (type-tag datum)
  (cond ((number? datum) 'scheme-number)
        ((pair? datum) (car datum))
        (else (error "Bad tagged datum -- TYPE-TAG" datum))))

(define (contents datum)
  (cond ((number? datum) datum)
        ((pair? datum) (cdr datum))
        (else (error "Bad taged datum -- CONTENTS" datum))))

(define (equ? x y) (apply-generic 'equ? x y))
(define (zero? x) (apply-generic 'zero? x))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'equ? '(scheme-number scheme-number) =)
  (put 'zero? 'scheme-number zero?)
  (put 'make 'scheme-number (lambda (x) (tag x)))
  'done)

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d) (cons n d))
  (define (equ? r1 r2) (and (= (numer r1) (numer r2))
                            (= (denom r1) (denom r2))))
  (define (zero? r1) (= (numer r1) 0))
  (define (tag x) (attach-tag 'rational x))
  (put 'equ? '(rational rational)
       (lambda (x y) (equ? x y)))
  (put 'zero? 'rational (lambda (x) (zero? x)))
  'done)

(define (install-complex-package)
  (define (make-from-real-imag x y) (cons x y))
  (define (real-part c) (car c))
  (define (imag-part c) (cdr c))
  (define (equ? c1 c2) (and (= (real-part c1) (real-part c2))
                            (= (imag-part c1) (imag-part c2))))
  (define (zero? c1) (and (= (real-part c1) 0)
                          (= (imag-part c1) 0)))
  (define (tag x) (attach-tag 'complex x))
  (put 'equ? '(complex complex) (lambda (x y) (equ? x y)))
  (put 'zero? 'complex (lambda (x) (equ? x)))
  'done)

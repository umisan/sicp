(define (make-monitored f)
  (let ((count 0))
    (define (get-count) count)
    (define (reset) 
      (begin (set! count 0)count))
    (define (mf f input)
      (begin (set! count (+ count 1))
             (f input)))
    (define (dispatch m)
      (cond ((eq? m 'how-many-calls?) (get-count))
            ((eq? m 'reset-count) (reset))
            (else (mf f m))))
    dispatch))

(define s (make-monitored sqrt))
(define plus (make-monitored (lambda (x) (+ x 1))))

(print (s 100))
(print (s 'how-many-calls?))
(print (s 100))
(print (s 'how-many-calls?))
(print (plus 10))
(print (plus 'how-many-calls?))
(print (s 'reset-count))

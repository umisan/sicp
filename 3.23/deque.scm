(define (make-deque-elm item prev)
  (cons item prev))
(define (make-deque)
  (let ((front-ptr (cons '() '()))
        (rear-ptr (cons '() '())))
    (define (empty-queue?)
      (null? (car front-ptr)))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (caar front-ptr)))
    (define (rear-queue)
      (if (empty-queue?)
          (error "REAR called with an empty queue")
          (caar rear-ptr)))
    (define (front-insert-queue! item)
      (let ((new-pair (cons (make-deque-elm item 'first) '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               front-ptr)
              (else
                (set-cdr! new-pair front-ptr)
                (set-cdr! (car front-ptr) new-pair)
                (set! front-ptr new-pair)
                front-ptr))))
    (define (rear-insert-queue! item)
      (let ((new-pair (cons (make-deque-elm item '()) '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               front-ptr)
              (else
                (set-cdr! (car new-pair) rear-ptr)
                (set-cdr! rear-ptr new-pair)
                (set! rear-ptr new-pair)
                front-ptr))))
    (define (front-delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE called with an empty queue"))
            (else
              (set! front-ptr (cdr front-ptr))
              front-ptr)))
    (define (rear-delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE called with an empty queue"))
            (else
              (let ((prev (cdar rear-ptr)))
                (set-cdr! prev '())
                (set! rear-ptr prev)
                front-ptr))))
    (define (print-deque)
      (define (print-deque-itr p)
        (cond ((null? (cdr p)) (print (caar p)))
              (else
                (display (caar p))
                (display " ")
                (print-deque-itr (cdr p)))))
      (print-deque-itr front-ptr))
    (define (dispatch m)
      (cond ((eq? m 'front-queue) front-queue)
            ((eq? m 'rear-queue) rear-queue)
            ((eq? m 'front-insert-queue!) front-insert-queue!)
            ((eq? m 'rear-insert-queue!) rear-insert-queue!)
            ((eq? m 'front-delete-queue!) front-delete-queue!)
            ((eq? m 'rear-delete-queue!) rear-delete-queue!)
            ((eq? m 'print) print-deque)
            (else (error "Not supported"))))
    dispatch))

(define dq (make-deque))
((dq 'front-insert-queue!) 'a)
((dq 'print))
((dq 'rear-insert-queue!) 'b)
((dq 'print))
((dq 'rear-insert-queue!) 'c)
((dq 'print))
(print ((dq 'front-queue)))
(print ((dq 'rear-queue)))
((dq 'front-delete-queue!))
((dq 'print))
((dq 'rear-delete-queue!))
((dq 'print))
